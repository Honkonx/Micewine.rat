# build-wine-micewine.yml
name: Build Micewine (Lite)

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Wine 版本号 (Elige una versión)'
        required: true
        default: 'wine-9.20'
        type: choice
        options:
          - wine-9.0
          - wine-9.20
          - wine-10
          - wine-10.1

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

jobs:
  build:
    # SOLUCIÓN: Cambiado a Ubuntu 22.04 para evitar el conflicto de paquetes en 24.04
    runs-on: ubuntu-22.04

    steps:
    - name: 设置版本变量
      run: |
        echo "WINE_VERSION=${{ github.event.inputs.wine_version }}" >> $GITHUB_ENV
        echo "SOURCE_DIR=wine" >> $GITHUB_ENV
        echo "构建 Wine 版本: ${{ github.event.inputs.wine_version }}"

    - name: 安装构建依赖
      run: |
        # Habilitar arquitectura i386 para multilib
        sudo dpkg --add-architecture i386
        sudo apt update
        # Reparar dependencias si es necesario
        sudo apt --fix-broken install -y
        
        # Dependencias base de compilación
        sudo apt install -y --no-install-recommends \
          perl \
          git \
          wget \
          xz-utils \
          bubblewrap \
          autoconf \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          mingw-w64 \
          gettext \
          libgettextpo-dev \
          locales \
          language-pack-zh-hans

        # Dependencias de Wine (basadas en tu lista) - 64 bits
        sudo apt install -y --no-install-recommends \
          libx11-dev \
          libxext-dev \
          libxcomposite-dev \
          libxrender-dev \
          libxcursor-dev \
          libxrandr-dev \
          libxxf86vm-dev \
          libxinerama-dev \
          libxfixes-dev \
          libxi-dev \
          libvulkan-dev \
          libglvnd-dev \
          libpulse-dev \
          libfreetype6-dev \
          libgnutls28-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-good1.0-dev \
          libunwind-dev

        # Dependencias de Wine (basadas en tu lista) - 32 bits (para WOW64)
        sudo apt install -y --no-install-recommends \
          libx11-dev:i386 \
          libxext-dev:i386 \
          libxcomposite-dev:i386 \
          libxrender-dev:i386 \
          libxcursor-dev:i386 \
          libxrandr-dev:i386 \
          libxxf86vm-dev:i386 \
          libxinerama-dev:i386 \
          libxfixes-dev:i386 \
          libxi-dev:i386 \
          libvulkan-dev:i386 \
          libglvnd-dev:i386 \
          libpulse-dev:i386 \
          libfreetype6-dev:i386 \
          libgnutls28-dev:i386 \
          libgstreamer1.0-dev:i386 \
          libgstreamer-plugins-base1.0-dev:i386 \
          libgstreamer-plugins-good1.0-dev:i386 \
          libunwind-dev:i386

    - name: 设置中文语言环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8

    - name: 检查工作目录
      run: |
        echo "当前工作目录: $(pwd)"
        ls -la
        echo "构建版本: ${{ env.WINE_VERSION }}"

    - name: 克隆 Wine 源码 (KreitinnSoftware)
      run: |
        git clone https://github.com/KreitinnSoftware/wine.git
        cd wine
        # Usar la versión seleccionada en el input
        git checkout ${{ env.WINE_VERSION }}
        echo "Cambiado a la rama/tag: ${{ env.WINE_VERSION }}"

    - name: 修复 Micewine (Termux) 路径问题
      run: |
        cd ${{ env.SOURCE_DIR }}
        
        echo "Reparando rutas para Micewine..."
        
        # Modificar todas las rutas /tmp/
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.micewine.emu/files/usr/tmp/|g'
        
        # Modificar rutas "/tmp" entre comillas
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp"|"/data/data/com.micewine.emu/files/usr/tmp"|g' {} +
        find . -name "file.c" -exec sed -i 's|"/tmp"|"/data/data/com.micewine.emu/files/usr/tmp"|g' {} +
        find . -name "loader.c" -exec sed -i 's|"/tmp"|"/data/data/com.micewine.emu/files/usr/tmp"|g' {} +
        find . -name "server.c" -exec sed -i 's|"/tmp"|"/data/data/com.micewine.emu/files/usr/tmp"|g' {} +
        
        echo "Rutas para Micewine reparadas."

    - name: Build Wine Tools (Host)
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir -p wine-tools
        cd wine-tools
        
        echo "Configurando Wine Tools (Host)..."
        ../configure --enable-win64 --without-x
        
        echo "Compilando Wine Tools (Host)..."
        make -j $(nproc) __tooldeps__ nls/all
        
        echo "Wine Tools compiladas."
        cd ../.. # Volver a la raíz

    - name: Configurar Wine (Target - WOW64)
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir -p build-wow64
        cd build-wow64
        
        # Exportar variables para MinGW (necesarias para --with-mingw=gcc)
        export CROSSCC="x86_64-w64-mingw32-gcc"
        export CROSSCXX="x86_64-w64-mingw32-g++"
        export CFLAGS="-march=x86-64 -msse3 -mfpmath=sse -O3 -ftree-vectorize -pipe"
        export CXXFLAGS="-march=x86-64 -msse3 -mfpmath=sse -O3 -ftree-vectorize -pipe"
        export CROSSCFLAGS="-march=x86-64 -msse3 -mfpmath=sse -O3 -ftree-vectorize -pipe"
        export CROSSCXXFLAGS="-march=x86-64 -msse3 -mfpmath=sse -O3 -ftree-vectorize -pipe"

        echo "Configurando Wine (Target - WOW64)..."
        # Aplicar argumentos de configuración proporcionados
        ../configure \
          --enable-archs=i386,x86_64 \
          --with-wine-tools=../wine-tools \
          --prefix=/tmp/wine-install \
          --without-oss \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --with-x \
          --with-pulse \
          --with-gstreamer \
          --with-opengl \
          --with-gnutls \
          --with-mingw=gcc \
          --with-xinput \
          --with-xinput2 \
          --enable-nls \
          --without-xshm \
          --without-xxf86vm \
          --without-osmesa \
          --without-usb \
          --without-sdl \
          --without-cups \
          --without-netapi \
          --without-pcap \
          --without-gphoto \
V         --without-v4l2 \
          --without-pcsclite \
          --without-wayland \
          --without-opencl \
          --without-dbus \
          --without-sane \
          --without-udev \
          --without-capi

    - name: Compilar Wine (Target - WOW64)
      run: |
        echo "Compilando Wine (Target)..."
        cd ${{ env.SOURCE_DIR }}/build-wow64
        make -j$(nproc)

    - name: Instalar Wine y obtener versión
      run: |
        cd ${{ env.SOURCE_DIR }}/build-wow64
        # Instalar WOW64 Wine
        make install

        # Usar la versión de la entrada
        VERSION="${{ env.WINE_VERSION }}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Wine Versión: $VERSION - (Micewine WOW64 Build)"

    - name: 验证 Vulkan 和 GStreamer 支持
      run: |
        echo "Verificando soporte Vulkan..."
        if [ -f "/tmp/wine-install/bin/wine" ]; then
          echo "Wine binario existe."
        else
          echo "Error: Wine binario NO existe."
          exit 1
        fi
        
        echo "Buscando archivos Vulkan..."
        find /tmp/wine-install -name "*vulkan*" | head -10
        echo ""
        echo "Buscando winevulkan.dll..."
        find /tmp/wine-install -name "winevulkan.dll*" | head -5
        echo ""
        echo "Buscando soporte GStreamer..."
        find /tmp/wine-install -name "*gst*" | head -10

    - name: Preparar empaquetado
      run: |
        # Crear directorio de empaquetado
        PACKAGE_NAME="wine-${{ env.VERSION }}-Micewine-Amod-wow64"
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        mkdir -p wine-package/$PACKAGE_NAME
        
        # Copiar archivos de Wine instalados
        echo "Copiando archivos de Wine a $PACKAGE_NAME..."
        cp -r /tmp/wine-install/* wine-package/$PACKAGE_NAME/

    - name: Crear archivo comprimido
      run: |
        echo "Estructura final de archivos:"
        find wine-package -type f | sort
        
        # Usar tar.xz
        tar -cJf $PACKAGE_NAME.tar.xz -C wine-package $PACKAGE_NAME
        
        echo "Empaquetado completo:"
        ls -lh *.tar.xz

    - name: Subir artefacto de compilación
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.tar.xz

    - name: Publicar en GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}-Micewine-Amod-wow64
        name: Wine ${{ env.VERSION }} (Micewine WOW64)
        body: |
          # Wine ${{ env.VERSION }} - Micewine WOW64
          
          ## Versión
          - **Wine Versión**: ${{ env.VERSION }}
          - **Arquitectura**: True WOW64 (Soporte 32-bit y 64-bit)
          - **Plataforma**: Micewine (Android/Termux)
          
          ## Características
          ✓ True WOW64 (32/64 bit)
          ✓ Soporte Vulkan
          ✓ Soporte GStreamer (Base + Good)
          ✓ Rutas de /tmp reparadas para Micewine
          
          ## Build Info
          - Fuente: ${{ github.server_url }}/KreitinnSoftware/wine/tree/${{ env.VERSION }}
          - Workflow: ${{ github.workflow }}
        files: ${{ env.PACKAGE_NAME }}.tar.xz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Información de salida
      run: |
        echo "✅ Compilación de Micewine WOW64 completada."
        echo "Versión: ${{ env.VERSION }}"
        echo "Paquete: ${{ env.PACKAGE_NAME }}.tar.xz"
        echo "Arquitectura: x86_64 True WOW64"
        echo "Plataforma: Micewine"

